if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("phyloseq")
install.packages(c( "readr", "patchwork"))

library("phyloseq")
library("ggplot2")
library("readr")
library("patchwork")
#------------------------------------------------------------------------
# Datos
S3_L001<-"pKV1MC6SS01_S3_L001"
S3_L002<-"pKV1MC6SS01_S3_L002"
S3_L003<-"pKV1MC6SS01_S3_L003"
S3_L004<-"pKV1MC6SS01_S3_L004"

S4_L001<-"pKV1MC6SS02_S4_L001"
S4_L002<-"pKV1MC6SS02_S4_L002"
S4_L003<-"pKV1MC6SS02_S4_L003"
S4_L004<-"pKV1MC6SS02_S4_L004"

S6_L001<-"pKV1MC6SS03_S6_L001"
S6_L002<-"pKV1MC6SS03_S6_L002"
S6_L003<-"pKV1MC6SS03_S6_L003"

#-------------------------------------------------------------------------
# Function read data

read_data <- function(file) {
  ranked_file<-paste("table/",file,".kraken.ranked-wc", sep = "")
  lineaged_file<-paste("table/",file,".kraken.lineage_table-wc", sep = "")
  
  #print(ranked_file)
  #print(lineaged_file)
  
  OTUS <- read_delim(ranked_file,"\t", escape_double = FALSE, trim_ws = TRUE)
  TAXAS <- read_delim(lineaged_file, "\t", 
                      escape_double = FALSE,  col_types = cols(subspecies = col_character(), 
                                                               subspecies_2 = col_character()), trim_ws = TRUE)
  
  names1 = OTUS$OTU
  names2 = TAXAS$OTU
  
  OTUS$OTU = NULL
  TAXAS$OTU = NULL
  
  abundances = as.matrix(OTUS)
  lineages = as.matrix(TAXAS)
  
  row.names(abundances) = names1
  row.names(lineages) = names2
  
  OTU = otu_table(abundances, taxa_are_rows = TRUE)
  TAX = tax_table(lineages)
  
  metagenome = phyloseq(OTU, TAX)
  Bacteria <- subset_taxa(metagenome, superkingdom == "Bacteria")
  
  metagenome <- prune_taxa(taxa_sums(metagenome)>10,metagenome)
  
  #no_contam <- subset_taxa(metagenomes, family != "mitochondria" & class != "Chloroplast" & genus != "Escherichia" & genus != "Staphylococcus", genus != "Wolbachia") 
  no_nullo <- subset_taxa(metagenome, phylum != "NA") 
  metagenome <- prune_taxa(c(taxa_names(no_nullo)),metagenome)
  
  
  return(metagenome)    
  
}    

#---------------------------------------------------------------------------

metagenomeS3_L001<-read_data(S3_L001)  
metagenomeS4_L001<-read_data(S4_L001)  
metagenomeS6_L001<-read_data(S6_L001)  

metagenomeS3_L002<-read_data(S3_L002)  
metagenomeS4_L002<-read_data(S4_L002)  
metagenomeS6_L002<-read_data(S6_L002)  

metagenomeS3_L003<-read_data(S3_L003)  
metagenomeS4_L003<-read_data(S4_L003)  
metagenomeS6_L003<-read_data(S6_L003)  

metagenomeS3_L004<-read_data(S3_L004)  
metagenomeS4_L004<-read_data(S4_L004)  
#metagenomeS6_L001<-read_data(S6_L001)  

merged_metagenomes = merge_phyloseq(metagenomeS3_L001,metagenomeS4_L001,metagenomeS6_L001,metagenomeS3_L002,metagenomeS4_L002,metagenomeS6_L002,
                                    metagenomeS3_L003,metagenomeS4_L003,metagenomeS6_L003,metagenomeS3_L004,metagenomeS4_L004)
p = plot_richness(merged_metagenomes, measures = c("Observed", "Chao1", "Shannon")) 
p + geom_point(size=5, alpha=0.7)  
#--------------------------------------------------------------------------------------------------------
percentages  = transform_sample_counts(merged_metagenomes, function(x) x*100 / sum(x) )
absolute_count = plot_bar(merged_metagenomes, fill="phylum")
absolute_count = absolute_count + geom_bar(aes(color=phylum, fill=phylum), stat="identity", position="stack") + ggtitle("Absolute abundance")

percentages = plot_bar(percentages, fill="phylum")
percentages = percentages + geom_bar(aes(color=phylum, fill=phylum), stat="identity", position="stack") + ggtitle("Relative abundance")

absolute_count | percentages  

#-----------------------------------------------------------------
percentages  = transform_sample_counts(merged_metagenomes, function(x) x*100 / sum(x) )
absolute_count = plot_bar(merged_metagenomes, fill="family")
absolute_count = absolute_count + geom_bar(aes(color=family, fill=family), stat="identity", position="stack") + ggtitle("Absolute abundance")

percentages = plot_bar(percentages, fill="family")
percentages = percentages + geom_bar(aes(color=family, fill=family), stat="identity", position="stack") + ggtitle("Relative abundance")

absolute_count | percentages  

